{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","state/todolists-reducer.ts","EditableSpan.tsx","state/tasks-reducer.ts","Todolist1.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","initialState","changeTodolistFilterAC","todolistId","filter","type","id","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist1","todolist","tasks","useSelector","state","dispatch","useDispatch","t","isDone","changeTodolistTitleAC","Delete","addTaskAC","map","key","className","Checkbox","checked","newIsDoneValue","taskId","newValue","changeTaskTitleAC","Button","AppWithRedux","todolists","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","action","v1","addTodolistAC","spacing","tl","item","Paper","rootReducer","combineReducers","el","copyState","find","store","legacy_createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2b60f098.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n}\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nlet initialState:Array<TodolistType>=[]\r\n\r\ntype ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType;\r\n\r\nexport const todolistsReducer = (state=initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{id: action.todolistId, title: action.title, filter: \"all\"},...state]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\r\n}\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: todolistId}\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField variant=\"outlined\"\r\n                        value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\nimport {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\nexport type ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\r\n\r\nlet initialState:TasksStateType={}\r\n\r\nexport type ActionsType = RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\n\r\nexport const tasksReducer = (state=initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(el => el.id !== action.taskId)\r\n            }\r\n\r\n        case \"ADD-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistId]]\r\n            }\r\n        case \"CHANGE-STATUS-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(el => el.id === action.taskId ? {\r\n                    ...el,\r\n                    isDone: action.isDone\r\n                } : el)\r\n            }\r\n        case \"CHANGE-TITLE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(el => el.id === action.taskId ? {\r\n                    ...el,\r\n                    title: action.title\r\n                } : el)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        /*case \"REMOVE-TODOLIST\": {\r\n            const {[action.id]:[],...rest}={...state} // деструктиризация\r\n            return rest\r\n        }*/\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId} as const\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string) => {\r\n    return {type: 'ADD-TASK', title, todolistId} as const\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) => {\r\n    return {type: 'CHANGE-STATUS-TASK', taskId, isDone, todolistId} as const\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\r\n    return {type: 'CHANGE-TITLE-TASK', taskId, title, todolistId} as const\r\n}\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TodolistType} from \"./AppWithRedux\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC} from \"./state/todolists-reducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\n/*type PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}*/\r\ntype PropsType = {\r\n    todolist: TodolistType\r\n}\r\n\r\nexport function Todolist1({todolist}: PropsType) {\r\n\r\n    const {id, title, filter} = {...todolist}\r\n    let tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[id])\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const addTask = (title: string) => {\r\n        // props.addTask(title, id);\r\n        dispatch(addTaskAC(title, id))\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        // props.removeTodolist(id);\r\n        dispatch(removeTodolistAC(id))\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        // props.changeTodolistTitle(id, title);\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n    }\r\n\r\n    const onAllClickHandler = () => dispatch(changeTodolistFilterAC(id, \"all\"));\r\n    const onActiveClickHandler = () => dispatch(changeTodolistFilterAC(id, \"active\"));\r\n    const onCompletedClickHandler = () => dispatch(changeTodolistFilterAC(id, \"completed\"));\r\n\r\n\r\n    if (filter === \"active\") {\r\n        tasks = tasks.filter(t => !t.isDone);\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasks = tasks.filter(t => t.isDone);\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasks.map(t => {\r\n                    const onClickHandler = () => dispatch(removeTaskAC(t.id, id))\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        dispatch(changeTaskStatusAC(t.id, newIsDoneValue, id));\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        dispatch(changeTaskTitleAC(t.id, newValue, id));\r\n                    }\r\n\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox\r\n                            checked={t.isDone}\r\n                            color=\"primary\"\r\n                            onChange={onChangeHandler}\r\n                        />\r\n\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler}/>\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {TaskType} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {addTodolistAC} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Todolist1} from \"./Todolist1\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n    // let todolistId1 = v1();\r\n    // let todolistId2 = v1();\r\n    /*let [todolists, dispatchToTodolists] = useReducer(todolistsReducer, [\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, dispatchToTasks] = useReducer(tasksReducer, {\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });*/\r\n\r\n\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    // let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    function addTodolist(title: string) {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n/*\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        dispatch(removeTodolistAC(id))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        dispatch( removeTaskAC(id, todolistId))\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        dispatch(addTaskAC(title, todolistId))\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId))\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        dispatch(changeTaskTitleAC(id, newTitle, todolistId))\r\n    }*/\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            /*let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => !t.isDone);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone);\r\n                            }*/\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist1\r\n                                        key={tl.id}\r\n                                        todolist={tl}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer'\r\nimport {todolistsReducer} from './todolists-reducer'\r\nimport {combineReducers, legacy_createStore} from 'redux'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = legacy_createStore(rootReducer)\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}